package CLI;

import logger.Logger;
import org.apache.commons.cli.*;

import java.io.File;

/**
 * Class that holds all logic for dealing the command line arguments.
 * It parses the arguments and can return the mode of execution, along with required
 * input variables.
 */
public class CommandLineProcessor {

    private String[] args;
    private Logger logger;
    private Options options;
    private CommandLineParser parser;
    private CommandLine cmd;
    private File inputFile;
    private boolean outputToConsole;

    public CommandLineProcessor(String[] args, Logger logger) {
        this.args = args;
        this.logger = logger;
        this.options = new Options();
        this.parser = new DefaultParser();
        this.outputToConsole = false;

        registerOptions();
    }

    public Options getOptions() {
        return options;
    }

    /**
     * @return The input file, if set while processing the command line arguments
     */
    public File getInputFile() {
        if (inputFile != null) {
            return inputFile;
        } else {
            throw new RuntimeException("Error while retrieving the input file: No" +
                    " input file specified");
        }
    }

    public void parse() {

        try {
            cmd = parser.parse(options, args);
        } catch (ParseException exception) {
            throw new RuntimeException("Could not parse command line arguments");
        }

    }

    public boolean getOutputToConsole() {
        return cmd.hasOption("v");
    }

    public ExecutionMode getExecutionMode() {

        if (cmd.hasOption("h")) {
            return ExecutionMode.HELP_MESSAGE;
        }

        // The following options all require an input file, check if this input file is supplied
        if (cmd.hasOption("f")) {
            inputFile = new File(cmd.getOptionValue("f"));

            // Check if the file is actually a file
            if (!inputFile.exists() || inputFile.isDirectory()) {
                logger.error("Could not fine the input file; " + inputFile.getName());
                return ExecutionMode.NONE;
            }
        } else {
            // No input file specified, output an error message to the user
            logger.error("No input file specified");
            return ExecutionMode.NONE;
        }

        if (cmd.hasOption("t")) {
            return ExecutionMode.SPECIFIED_INPUT_FILE;
        }

        if (cmd.hasOption("g")) {
            return ExecutionMode.GENERATED_TEST_CASE;
        }

        if (cmd.hasOption("b")) {
            return ExecutionMode.BULK_TESTING;
        }

        return ExecutionMode.NONE;
    }

    /**
     * Registers all command line options
     */
    private void registerOptions() {

        options.addOption(
                "f",
                "file",
                true,
                "Specifies the location of the input file"
        );

        options.addOption(
                "h",
                "help",
                false,
                "Prints the help message"
        );

        options.addOption(
                "t",
                "test-case",
                false,
                "Runs the algorithm with a given test case file"
        );

        options.addOption(
                "g",
                "generate",
                false,
                "Runs the algorithm with a test case generated by the Test Factory"
                + ". The Test Factory requires a config file"
        );

        options.addOption(
                "b",
                "bulk",
                false,
                "Runs a bunch of test cases generated by the Test Factory, using"
                + " the config file for the Test Factory"
        );

        options.addOption(
                "v",
                false,
                "If provided, all output will be send to the console. Note that "
                + "the runtime might be inaccurate since outputting is an extreme bottle neck"
        );
    }

}
