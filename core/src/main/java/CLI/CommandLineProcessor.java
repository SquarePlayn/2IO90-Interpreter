package CLI;

import org.apache.commons.cli.*;

import java.io.File;

/**
 * Class that holds all logic for dealing the command line arguments.
 * It parses the arguments and can return the mode of execution, along with required
 * input variables.
 */
public class CommandLineProcessor {

    private String[] args;
    private Options options;
    private CommandLineParser parser;
    private CommandLine cmd;
    private File inputFile;

    public CommandLineProcessor(String[] args) {
        this.args = args;
        this.options = new Options();
        this.parser = new DefaultParser();

        registerOptions();
    }

    public Options getOptions() {
        return options;
    }

    /**
     * @return The input file, if set while processing the command line arguments
     */
    public File getInputFile() {
        if (inputFile != null) {
            return inputFile;
        } else {
            throw new RuntimeException("Error while retrieving the input file: No" +
                    " input file specified");
        }
    }

    public ExecutionMode getExecutionMode() {

        try {

            cmd = parser.parse(options, args);

            if (cmd.hasOption("h")) {
                return ExecutionMode.HELP_MESSAGE;
            }

            // TODO Implement other command line options
            if (cmd.hasOption("t")) {

            }

        } catch (ParseException exception) {

            throw new RuntimeException("Could not parse command line arguments correctly: \n"
                + exception.getMessage());

        }

    }

    /**
     * Registers all command line options
     */
    private void registerOptions() {

        options.addOption(
                "h",
                "help",
                false,
                "Prints the help message"
        );

        options.addOption(
                "t",
                "test-case",
                true,
                "Runs the algorithm with a given test case file"
        );

        options.addOption(
                "g",
                "generate",
                true,
                "Runs the algorithm with a test case generated by the Test Factory"
                + ". The Test Factory requires a config file"
        );

        options.addOption(
                "b",
                "bulk",
                true,
                "Runs a bunch of test cases generated by the Test Factory, using"
                + " the config file for the Test Factory"
        );

    }

}
