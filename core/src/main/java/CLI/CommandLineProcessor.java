package CLI;

import org.apache.commons.cli.*;

import java.io.File;

/**
 * Class that holds all logic for dealing the command line arguments.
 * It parses the arguments and can return the mode of execution, along with required
 * input variables.
 */
public class CommandLineProcessor {

    private String[] args;
    private Options options;
    private CommandLineParser parser;
    private CommandLine cmd;
    private File inputFile;

    /**
     * Constructor.
     *
     * @param args Command line arguments
     */
    public CommandLineProcessor(String[] args) {
        this.args = args;
        this.options = new Options();
        this.parser = new DefaultParser();

        registerOptions();
    }

    public Options getOptions() {
        return options;
    }

    /**
     * @return The input file, if set while processing the command line arguments
     */
    public File getInputFile() {
        if (inputFile != null) {
            return inputFile;
        } else {
            throw new RuntimeException("Error while retrieving the input file: No" +
                    " input file specified");
        }
    }

    /**
     * Parses the command line arguments
     */
    public void parse() {

        try {
            cmd = parser.parse(options, args);
        } catch (ParseException exception) {
            throw new RuntimeException("Could not parse command line arguments, use -h to see the help");
        }

    }

    /**
     * @return Whether the verbose flag has been set
     */
    public boolean getOutputToConsole() {
        return cmd.hasOption("v");
    }

    /**
     * @return The amount of times the algorithm should be repeated on the same test case
     */
    public int getRepeatAmount() {

        if (cmd.hasOption("r")) {
            return Integer.parseInt(cmd.getOptionValue("r"));
        } else {
            return 1;
        }

    }

    /**
     * @return The mode of execution
     */
    public ExecutionMode getExecutionMode() {

        if (cmd.hasOption("h")) {
            return ExecutionMode.HELP_MESSAGE;
        }

        if (cmd.hasOption("t")) {
            inputFile = getTestCase();

            return ExecutionMode.SPECIFIED_INPUT_FILE;
        }

        // Generated test case
        if (cmd.hasOption("g")) {
            inputFile = getConfigFile("g");

            return ExecutionMode.GENERATED_TEST_CASE;
        }

        if (cmd.hasOption("b")) {
            inputFile = getConfigFile("b");

            return ExecutionMode.BULK_TESTING;
        }

        return ExecutionMode.NONE;
    }

    /**
     * @param mode The execution mode
     * @return The config file for the test factory
     */
    private File getConfigFile(String mode) {

        File configFile = new File(cmd.getOptionValue(mode));

        // Check if the file is actually a file
        if (!configFile.exists() || configFile.isDirectory()) {
            throw new RuntimeException("Could not fine the config file '" + configFile.getAbsolutePath() + "'");
        }

        return configFile;
    }

    /**
     * @return The test case file
     */
    private File getTestCase() {

        File testCase = new File(cmd.getOptionValue("t"));

        // Check if the file is actually a file
        if (!testCase.exists()) {
            throw new RuntimeException("Could not find the given test case file/path '" + testCase.getAbsolutePath() + "'");
        }

        return testCase;
    }

    /**
     * Registers all command line options
     */
    private void registerOptions() {

        options.addOption(
                "h",
                "help",
                false,
                "Prints the help message"
        );

        options.addOption(
                "t",
                "test-case",
                true,
                "Runs the algorithm with a given test case file"
        );

        options.addOption(
                "g",
                "generate",
                true,
                "Runs the algorithm with a test case generated by the Test Factory"
                        + ". The Test Factory requires a config file"
        );

        options.addOption(
                "b",
                "bulk",
                true,
                "Runs a bunch of test cases generated by the Test Factory, using"
                        + " the config file for the Test Factory"
        );

        options.addOption(
                "r",
                "repeat",
                true,
                "Specifies the amount of times the algorithm should be executed on the specified test case"
        );

        options.addOption(
                "v",
                false,
                "If provided, all output will be send to the console. Note that "
                        + "the runtime might be inaccurate since outputting is an extreme bottle neck"
        );
    }

}
