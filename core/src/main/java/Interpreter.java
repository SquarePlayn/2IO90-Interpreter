import CLI.CommandLineProcessor;
import exceptions.SimulatorException;
import input.Reader;
import org.apache.commons.cli.*;
import simulator.Simulator;
import simulator.SimulatorReport;
import testfactory.TestFactory;
import testfactory.preamble.PreambleOptions;

import java.io.File;
import java.util.ArrayList;

/**
 * Main entry point for the interpreter
 */
public class Interpreter {

    private ArrayList<String> input;
    private ArrayList<String> output;

    /**
     * Initialise buffers and readers to receive input and output from the algorithm
     */
    private void setup() {

        // Clear buffers
        input = new ArrayList<>();
        output = new ArrayList<>();

        // Create new readers
        Reader inputReader = new Reader(input);
        Reader outputReader = new Reader(output);

        // Register readers to get input and output from the algorithm
        TaxiScanner.getInstance().registerInputReader(inputReader);
        TaxiScanner.getInstance().registerOutputReader(outputReader);

    }

    /**
     * Runs the algorithm with a give test case file
     *
     * @param testCase Test case
     */
    public SimulatorReport run(File testCase) {

        // Set test case
        TaxiScanner.setInputFile(testCase);

        // Run setup
        setup();

        // Keep track of time and run the algorithm
        long startTime = System.currentTimeMillis();
        (new Main()).run();
        long endTime = System.currentTimeMillis();

        // Create a new simulator and run simulation
        Simulator simulator = new Simulator(input, output);
        SimulatorReport report;

        try {
            simulator.simulate();
        } catch (SimulatorException exception) {
            report = new SimulatorReport(
                    false,
                    exception
            );
        }

        report = new SimulatorReport(
                true,
                endTime - startTime,
                simulator.getCosts()
        );

        return report;
    }

    public void run(/* TODO Run simulation with data generated by the test factory */) {

    }

    private void testTestFactory() {
        // TODO Rewrite this
        TestFactory testFactory = new TestFactory();
        PreambleOptions options = new PreambleOptions();

        options.setAlpha(0.5);
        options.setAmountOfTaxis(10);
        options.setMaxDropoffTime(10000);
        options.setMaxTaxiCapacity(4);
        options.setGraphSize(1000);
        options.setTrainingDuration(10);
        options.setCallListLength(1000);
        options.setGraphDensity(0.1F);

        testFactory.createTestCase(
                "C:/Users/s163980/Documents/TU/Year 2/Quartile 2/DBL Algorithms/test.txt",
                options,
                12345678910L);
    }

    public static void main(String[] args) {

        CommandLineProcessor processor = new CommandLineProcessor();

        switch (processor.getExecutionMode()) {

            case HELP_MESSAGE:
                HelpFormatter formatter = new HelpFormatter();
                formatter.printHelp( "interpreter", processor.getOptions());
                break;

            case SPECIFIED_INPUT_FILE:
                File testCase = processor.getInputFile();
                break;

            case GENERATED_TEST_CASE:
                break;

            case BULK_TESTING:
                break;

        }

        try {
            cmd = parser.parse(options, args);
            printHelp = cmd.hasOption("h");
            justAlgorithm = cmd.hasOption("a");
            justTestFactory = cmd.hasOption("t");
            inputFile = cmd.hasOption("i") ? new File(cmd.getOptionValue("i")) : null;
        } catch (ParseException e) {
            System.out.println("Error while parsing arguments, continuing normal execution.");
            e.printStackTrace();
        }

        if (inputFile != null) {
            System.out.println("Using specified input file.");
//            TaxiScanner.setInputFile(inputFile);
        }

        if (justAlgorithm) {
            System.out.println("Running just the algorithm...");
            (new Main()).run();
            return;
        }

        if (justTestFactory) {
            System.out.println("Running just the test factory...");
            (new Interpreter()).testTestFactory();
            return;
        }

        System.out.println("Executing interpreter");
        (new Interpreter()).run(inputFile);
    }
}
